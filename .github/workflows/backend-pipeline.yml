name: CICD-Backend

on: 
  push


jobs:
  test-backend-gradleTests:
    name: Backend Gradle Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports: 
          - 5432:5432
    defaults:
      run:  
        shell: bash
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 18
        uses: actions/setup-java@v1
        with:
          distribution: 'temurin'
          java-version: '18'
          cache: 'gradle'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew test
  test-backend-sonarqube:
    name: Backend Sonarqube Tests
    runs-on: ubuntu-latest
    defaults:
      run:  
        shell: bash
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 18
        uses: actions/setup-java@v1
        with:
          distribution: 'temurin'
          java-version: '18'
          cache: 'gradle'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: check sonarqube
        run: ./gradlew sonarqube --info -Dsonar.projectKey=uk223  -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  test-backend-postman:
    name: Backend Postman Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports: 
          - 5432:5432
    defaults:
      run:  
        shell: bash
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 18
        uses: actions/setup-java@v1
        with:
          distribution: 'temurin'
          java-version: '18'
          cache: 'gradle'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Postman
        run: ./gradlew bootRun --args='postman'

  build-and-push:
    name: build tagged docker version
    runs-on: ubuntu-latest
    needs: [test-backend-gradleTests, test-backend-sonarqube, test-backend-postman]
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: build and push docker image backend
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: 
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker-backend:${{ github.sha }},
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker-backend:latest
      - name: build and push docker image frontend
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: 
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker-frontend:${{ github.sha }},
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker-frontend:latest

  restart-server-docker:
    name: Restart server docker compose
    runs-on: ubuntu-latest
    needs: build-and-push
    defaults:
      run:  
        shell: bash
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3

      - name: copying remote shell script using password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          source: ./docker-compose.yml
          target: .

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            docker pull asuzas/docker-backend
            docker-compose up -d


#    <----------------------------- Frontend ----------------------------->

  test-frontend-cypress:
    runs-on: ubuntu-latest
    defaults:
      run:  
        shell: bash
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        # Install NPM dependencies, cache them correctly
        # and run all Cypress tests
      - name: Setup npm package
        run: npm install --force
      - name: Cypress run
        uses: cypress-io/github-action@v4 # TODO use the explicit version number
        with:
          build: npm run build
          start: npm start
  
  build-and-push-frontend:
    name: build tagged docker version
    runs-on: ubuntu-latest
    needs: [test-frontend-cypress]
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: build and push docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: 
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker-backend:${{ github.sha }},
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker-backend:latest